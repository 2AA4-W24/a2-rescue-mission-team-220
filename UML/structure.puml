@startuml structure

interface IExplorerRaid {
    +initialize(s: String)
    +takeDecision(): String
    +acknowledgeResults(s: String)
    +deliverFinalReport(): String
}
interface State {
    +handle()
}
interface SearchAlgorithm {
    +searchArea()
}

class Explorer {
    -map: AreaMap
    -translator: Translator
    -drone: Drone

    +initialize(s: String)
    +takeDecision(): String
    +acknowledgeResults(s: String)
    +deliverFinalReport(): String
}
class Translator
class Information
class Drone {
    -battery: Integer
    -heading: Direction
    +this(battery: Integer, heading: Direction)
    +getBattery(): Integer
    +getHeading(): Direction
}
class Compass {
    heading: Direction
}
class Point {
    -x: Integer
    -y: Integer
    +this(x: Integer, y: Integer)
    +getX(): Integer
    +getY(): Integer
    +hashCode(): int ^
    +equals(o: Object): boolean ^
    +toString(): String ^
}
class AreaMap {
    -coordinateSystem: Map<Point, MapFeature>
    +this()
    +addPoint(point: Point, feature: MapFeature)
    +getPoint(point: Point): MapFeature
}
class DecisionHandler {
    -currentState: State

    +determineDecision(map: AreaMap, drone: Drone)
}
class StartState {
    +handle()
}
class initialXState {
    +handle()
}
class initialYLeftState {
    +handle()
}
class initialYRightState {
    +handle()
}
class UTurnState {
    +handle()
}
class SkipWaterState {
    +handle()
}
class MoveForwardOnIslandState {
    +handle()
}
class SearchIslandState {
    +handle()
}
class StopState {
    +handle()
}
class GridSearch {
    +searchArea()
}
class SmartAlgo {
    +searchArea()
}

enum Direction {
    +NORTH
    +SOUTH
    +EAST
    +WEST
    -dir: char
    +this(dir: char)
    +toString(): String ^
    +toDirection(dir: String): Direction
}
enum MapFeature {
    +OCEAN
    +CREEK
    +EMERGENCYSITE
    +LAND
    +UNKNOWN
}
enum Action {
    +FLYFORWARD
    +FLYLEFT
    +FLYRIGHT
    +ECHOFORWARD
    +ECHOLEFT
    +ECHORIGHT
    +SCAN
    +STOP
}

IExplorerRaid <|.. Explorer
Explorer --> Translator
Translator --> Information
Translator --> Action
Explorer --> Drone
Drone --> Compass
Compass --> Direction
Explorer --> AreaMap
AreaMap *--> "*" Point
AreaMap *--> "*" MapFeature
Explorer --> DecisionHandler
DecisionHandler --> State
StartState ..|> State
initialXState ..|> State
initialYLeftState ..|> State
initialYRightState ..|> State
UTurnState ..|> State
SkipWaterState ..|> State
MoveForwardOnIslandState ..|> State
StopState ..|> State
SearchIslandState ..|> State
SearchIslandState --> SearchAlgorithm
SmartAlgo ..|> SearchAlgorithm
GridSearch ..|> SearchAlgorithm

@enduml
