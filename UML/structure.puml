@startuml structure

interface IExplorerRaid {
    +initialize(s: String)
    +takeDecision(): String
    +acknowledgeResults(s: String)
    +deliverFinalReport(): String
}
interface DecisionHandler {
    +determineDecision(map: AreaMap, drone: Drone)
}

class Explorer {
    -map: AreaMap
    -translator: Translator
    -drone: Drone

    +initialize(s: String)
    +takeDecision(): String
    +acknowledgeResults(s: String)
    +deliverFinalReport(): String
} 
class Translator
class Information
class Drone {
    -battery: Integer
    -heading: Direction
    +this(battery: Integer, heading: Direction)
    +getBattery(): Integer
    +getHeading(): Direction
} 
class Compass {
    heading: Direction
}
class Point {
    -x: Integer
    -y: Integer
    +this(x: Integer, y: Integer)
    +getX(): Integer
    +getY(): Integer
    +hashCode(): int ^
    +equals(o: Object): boolean ^
    +toString(): String ^
}
class GridSearch {
    +determineDecision(map: AreaMap, drone: Drone)
}
class CoastlineSearch {
    +determineDecision(map: AreaMap, drone: Drone)
}
class AreaMap {
    -coordinateSystem: Map<Point, MapFeature>
    +this()
    +addPoint(point: Point, feature: MapFeature)
    +getPoint(point: Point): MapFeature
}

enum Direction {
    +NORTH
    +SOUTH 
    +EAST 
    +WEST
    -dir: char
    +this(dir: char)
    +toString(): String ^
    +toDirection(dir: String): Direction
}
enum MapFeature {
    +OCEAN
    +CREEK 
    +EMERGENCYSITE
    +LAND
    +UNKNOWN
}

IExplorerRaid <|.. Explorer
Explorer --> Translator
Translator --> Information
Explorer --> Drone
Drone --> Compass
Compass --> Direction
Explorer --> AreaMap
AreaMap *--> "*" Point
AreaMap --> MapFeature
Explorer --> DecisionHandler
DecisionHandler <|.. GridSearch
DecisionHandler <|.. CoastlineSearch

@enduml